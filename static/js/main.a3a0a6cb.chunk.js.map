{"version":3,"sources":["reducers/counter.js","reducers/logged.js","reducers/index.js","actions/index.js","Counter.js","App.js","reportWebVitals.js","index.js"],"names":["counterReducer","state","action","type","payload","loggedReducer","allReducers","combineReducers","counter","isLogged","increment","num","Counter","useSelector","dispatch","useDispatch","onClick","store","createStore","allReducer","window","__REDUX_DEVTOOLS_EXTENSION__","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAYeA,EAZQ,WAAyB,IAAxBC,EAAuB,uDAAf,EAAGC,EAAY,uCAC3C,OAAQA,EAAOC,MACX,IAAK,YACD,OAAOF,EAAQC,EAAOE,QAC1B,IAAK,YACD,OAAOH,EAAQ,EACnB,IAAK,QACG,OAAe,EAARA,EACf,QACI,OAAOA,ICDJI,EARO,WAA6B,IAA5BJ,EAA2B,wDAAZC,EAAY,uCAC9C,OAAQA,EAAOC,MACX,IAAK,UACD,OAAQF,EACZ,QACI,OAAOA,ICIJK,EALKC,YAAgB,CAChCC,QAASR,EACTS,SAAUJ,I,OCNDK,EAAY,SAACC,GACtB,MAAO,CACHR,KAAM,YACNC,QAASO,IC4BFC,MA3Bf,WACI,IAAMJ,EAAUK,aAAY,SAAAZ,GAAK,OAAIA,EAAMO,WACrCC,EAAWI,aAAY,SAAAZ,GAAK,OAAIA,EAAMQ,YACtCK,EAAWC,cACjB,OACI,8BACKN,EACO,gCACI,4CAAeD,KACf,wBAAQQ,QAAS,kBAAMF,EAASJ,EAAU,KAA1C,yBACA,wBAAQM,QAAS,kBAAMF,EAASJ,EAAU,KAA1C,0BACA,uBACA,wBAAQM,QAAS,kBAAMF,EDTpC,CACHX,KAAM,eCQU,yBACA,uBACA,wBAAQa,QAAS,kBAAMF,EDNpC,CACHX,KAAM,WCKU,mBACA,uBACA,wBAAQa,QAAS,kBAAMF,EDHpC,CACHX,KAAM,aCEU,yBAGJ,wBAAQa,QAAS,kBAAMF,EDNhC,CACHX,KAAM,aCKM,wBCjBdc,EAAQC,YACZC,EACAC,OAAOC,8BAAgCD,OAAOC,gCAcjCC,MAXf,WAEE,OACI,qBAAKC,UAAU,MAAf,SACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,EAAD,SCJGO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a3a0a6cb.chunk.js","sourcesContent":["const counterReducer = (state = 0, action ) => {\r\n    switch (action.type) {\r\n        case \"INCREMENT\":\r\n            return state + action.payload\r\n        case \"DECREMENT\":\r\n            return state - 1\r\n        case \"RESET\":\r\n                return state * 0\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default counterReducer","const loggedReducer = (state = false, action ) => {\r\n    switch (action.type) {\r\n        case \"SIGN_IN\":\r\n            return !state\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default loggedReducer","import counterReducer from './counter';\r\nimport loggedReducer from './logged';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    counter: counterReducer,\r\n    isLogged: loggedReducer\r\n})\r\n\r\nexport default allReducers","export const increment = (num) => {\r\n    return {\r\n        type: 'INCREMENT',\r\n        payload: num\r\n    }\r\n}\r\nexport const decrement = () => {\r\n    return {\r\n        type: 'DECREMENT'\r\n    }\r\n}\r\nexport const reset = () => {\r\n    return {\r\n        type: 'RESET'\r\n    }\r\n}\r\nexport const signIn = () => {\r\n    return {\r\n        type: 'SIGN_IN'\r\n    }\r\n}","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { increment, decrement, signIn, reset } from './actions'\r\n\r\nfunction Counter() {\r\n    const counter = useSelector(state => state.counter);\r\n    const isLogged = useSelector(state => state.isLogged);\r\n    const dispatch = useDispatch()\r\n    return (\r\n        <div>\r\n            {isLogged?(\r\n                    <div>\r\n                        <h1>Counter : {counter}</h1> \r\n                        <button onClick={() => dispatch(increment(1))}>Increment +</button> \r\n                        <button onClick={() => dispatch(increment(5))}>Increment +5</button> \r\n                        <br/>\r\n                        <button onClick={() => dispatch(decrement())}>Decrement -</button>\r\n                        <br/>\r\n                        <button onClick={() => dispatch(reset())}>Reset</button>\r\n                        <hr/>\r\n                        <button onClick={() => dispatch(signIn())}>Sign Out</button>    \r\n                    </div>   \r\n                ):(\r\n                    <button onClick={() => dispatch(signIn())}>Sign In</button>\r\n                )\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter\r\n","import './App.css';\nimport {createStore} from 'redux';\nimport allReducer from './reducers'; //not need /index\nimport { Provider } from 'react-redux'\nimport Counter from './Counter';\n\nconst store = createStore(\n  allReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() //tool to visualize redux store(redux devtools chrome extension)\n)\n\nfunction App() {\n \n  return (\n      <div className=\"App\">\n        <Provider store={store}>\n            <Counter/>\n        </Provider>   \n      </div> \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}